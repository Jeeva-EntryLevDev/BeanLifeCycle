üß© Problem 1: Simple Bean Configuration
Create a simple Book class with title and author fields.
Register it as a Spring Bean using annotation-based configuration and print its details from the main application.


Mistake I made : created parameterized constroctor for the @Component class 
‚ö†Ô∏è 1. Constructor with Parameters in a @Component Bean
	Spring cannot automatically resolve constructor parameters like title and authors unless:
	You annotate them with @Value (e.g., from a .properties file), or
	You define the bean in @Configuration with explicit arguments
	‚úÖ Fix Option 1: Use default values inside the class:
	‚úÖ Fix Option 2: Set via setter injection or manually through @Bean method
	
Manually through @Bean method
Step-by-Step: Using @Bean Method for Manual Configuration
	üîß 1. Modify Book.java ‚Äì remove @Component
	‚öôÔ∏è 2. Update AppConfig.java ‚Äì add a @Bean method
			package com.problems;

			import org.springframework.context.annotation.AnnotationConfigApplicationContext;
			import org.springframework.context.annotation.Bean;
			import org.springframework.context.annotation.Configuration;
			
			@Configuration
			public class AppConfig {
			
			    // Manual Bean Configuration
			    @Bean
			    public Book book() {
			        return new Book("Deep Work", "Cal Newport");
			    }
			
			    public static void main(String[] args) {
			        try (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class)) {
			            Book book = context.getBean(Book.class);
			            book.display();
			        }
			    }
			}
				
				
Why use @Bean manually?
		When your class has a constructor with parameters that Spring can't resolve automatically
		When you want more control over how the bean is created (e.g., based on logic, external input, etc.)		