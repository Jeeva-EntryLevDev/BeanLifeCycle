Problem 3: Loose Coupling Message System
Create a system where MessageSender can send messages using either SMS or Email based on configuration. 
Use interface-based injection to make the system loosely coupled.


						MessageService(I) 
			EmailSender						SMSSender 
						MessageSender 
						AppConfig
						MainApplication

Output (if emailService is active)
		Email sent: Hello Jeeva!
		
Change @Qualifier("emailService") to @Qualifier("smsService") → Output becomes:
		SMS sent: Hello Jeeva!
	
@Component + @Qualifier = loose coupling
Easy to swap one implementation with another (no if/else, no hardcoding)

When Should You Use @Qualifier?
✅ Multiple Beans of the Same Type Exist
✅ Spring Cannot Determine Which Bean to Inject Automatically
✅ You Need to Explicitly Specify Which Bean to Use



If you use @primary --> default bean selection

@Component
@Primary  // DieselEngine will be the default bean
public class DieselEngine implements Engine {
    public void start() {
        System.out.println("Diesel Engine Started");
    }
}


In Car class
  @Autowired
    public Car(Engine engine) {  
        this.engine = engine;
    }
    
✔ Spring injects DieselEngine as the default bean because it has @Primary.
✔ No need to specify @Qualifier("dieselEngine"), unless overriding the selection.


If you want PetrolEngine instead, explicitly use:

@Autowired
public Car(@Qualifier("petrolEngine") Engine engine) {
    this.engine = engine;
}
  


